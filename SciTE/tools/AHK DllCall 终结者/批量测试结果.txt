hWnd := ""
lpText := ""
lpCaption := ""
uType := ""
ret := DllCall("MessageBox", "Ptr", hWnd, "Str", lpText, "Str", lpCaption, "UInt", uType)

uiAction := ""
uiParam := ""
VarSetCapacity(pvParam, 128, 0)
fWinIni := ""
ret := DllCall("SystemParametersInfo", "UInt", uiAction, "UInt", uiParam, "Ptr", &pvParam, "UInt", fWinIni)

hWnd := ""
ret := DllCall("IsWindowVisible", "Ptr", hWnd)

; 警告：函数可能存在额外参数，需自行确定。
lpOut := ""
lpFmt := ""
ret := DllCall("wsprintf", "Str", lpOut, "Str", lpFmt)

; 提示：参数 lpFrequency 的类型 LARGE_INTEGER 未知，但根据特征猜测应为 Ptr 。
VarSetCapacity(lpFrequency, 128, 0)
ret := DllCall("QueryPerformanceFrequency", "Ptr", &lpFrequency)

; 提示：参数 lpPerformanceCount 的类型 LARGE_INTEGER 未知，但根据特征猜测应为 Ptr 。
VarSetCapacity(lpPerformanceCount, 128, 0)
ret := DllCall("QueryPerformanceCounter", "Ptr", &lpPerformanceCount)

hWnd := ""
nBar := ""
ret := DllCall("GetScrollPos", "Ptr", hWnd, "Int", nBar)

; 提示：参数 lpsi 的类型 LPSCROLLINFO 未知，但根据特征猜测应为 Ptr 。
hwnd := ""
nBar := ""
VarSetCapacity(lpsi, 128, 0)
ret := DllCall("GetScrollInfo", "Ptr", hwnd, "Int", nBar, "Ptr", &lpsi)

; 提示：参数 lpSecurityAttributes 的类型 LPSECURITY_ATTRIBUTES 未知，但根据特征猜测应为 Ptr 。
lpFileName := ""
dwDesiredAccess := ""
dwShareMode := ""
VarSetCapacity(lpSecurityAttributes, 128, 0)
dwCreationDisposition := ""
dwFlagsAndAttributes := ""
hTemplateFile := ""
ret := DllCall("CreateFile", "Str", lpFileName, "UInt", dwDesiredAccess, "UInt", dwShareMode, "Ptr", &lpSecurityAttributes, "UInt", dwCreationDisposition, "UInt", dwFlagsAndAttributes, "Ptr", hTemplateFile, "Ptr")

; 提示：参数 lpOverlapped 的类型 LPOVERLAPPED 未知，但根据特征猜测应为 Ptr 。
hFile := ""
VarSetCapacity(lpBuffer, 128, 0)
nNumberOfBytesToWrite := ""
lpNumberOfBytesWritten := ""
VarSetCapacity(lpOverlapped, 128, 0)
ret := DllCall("WriteFile", "Ptr", hFile, "Ptr", &lpBuffer, "UInt", nNumberOfBytesToWrite, "UInt*", lpNumberOfBytesWritten, "Ptr", &lpOverlapped)

hObject := ""
ret := DllCall("CloseHandle", "Ptr", hObject)

; 提示：参数 lpOverlapped 的类型 LPOVERLAPPED 未知，但根据特征猜测应为 Ptr 。
hFile := ""
VarSetCapacity(lpBuffer, 128, 0)
nNumberOfBytesToRead := ""
lpNumberOfBytesRead := ""
VarSetCapacity(lpOverlapped, 128, 0)
ret := DllCall("ReadFile", "Ptr", hFile, "Ptr", &lpBuffer, "UInt", nNumberOfBytesToRead, "UInt*", lpNumberOfBytesRead, "Ptr", &lpOverlapped)

hInstance := ""
lpCursorName := ""
ret := DllCall("LoadCursor", "Ptr", hInstance, "Str", lpCursorName, "Ptr")

h := ""
type := ""
cx := ""
cy := ""
flags := ""
ret := DllCall("CopyImage", "Ptr", h, "UInt", type, "Int", cx, "Int", cy, "UInt", flags, "Ptr")

hInst := ""
xHotSpot := ""
yHotSpot := ""
nWidth := ""
nHeight := ""
VarSetCapacity(pvANDPlane, 128, 0)
VarSetCapacity(pvXORPlane, 128, 0)
ret := DllCall("CreateCursor", "Ptr", hInst, "Int", xHotSpot, "Int", yHotSpot, "Int", nWidth, "Int", nHeight, "Ptr", &pvANDPlane, "Ptr", &pvXORPlane, "Ptr")

hcur := ""
id := ""
ret := DllCall("SetSystemCursor", "Ptr", hcur, "UInt", id)

; 提示：参数 lpRect 的类型 LPRECT 未知，但根据特征猜测应为 Ptr 。
hWnd := ""
VarSetCapacity(lpRect, 128, 0)
ret := DllCall("GetWindowRect", "Ptr", hWnd, "Ptr", &lpRect)

hWnd := ""
ret := DllCall("GetDC", "Ptr", hWnd, "Ptr")

color := ""
ret := DllCall("CreateSolidBrush", "UInt", color, "Ptr")

; 提示：参数 lprc 的类型 const RECT 未知，但根据特征猜测应为 Ptr 。
hDC := ""
VarSetCapacity(lprc, 128, 0)
hbr := ""
ret := DllCall("FillRect", "Ptr", hDC, "Ptr", &lprc, "Ptr", hbr)

hWnd := ""
hDC := ""
ret := DllCall("ReleaseDC", "Ptr", hWnd, "Ptr", hDC)

ho := ""
ret := DllCall("DeleteObject", "Ptr", ho)

; 提示：参数 lpSystemTime 的类型 const SYSTEMTIME 未知，但根据特征猜测应为 Ptr 。
VarSetCapacity(lpSystemTime, 128, 0)
ret := DllCall("SetSystemTime", "Ptr", &lpSystemTime)

; 错误：返回值的类型 NTSTATUS 未知，需自行确定。
; 提示：参数 hAlgorithm 的类型 BCRYPT_ALG_HANDLE 未知，但根据特征猜测应为 Ptr 。
; 提示：参数 phHash 的类型 BCRYPT_HASH_HANDLE 未知，但根据特征猜测应为 Ptr* 。
hAlgorithm := ""
phHash := ""
pbHashObject := ""
cbHashObject := ""
pbSecret := ""
cbSecret := ""
dwFlags := ""
ret := DllCall("BCryptCreateHash", "Ptr", hAlgorithm, "Ptr*", phHash, "UChar*", pbHashObject, "UInt", cbHashObject, "UChar*", pbSecret, "UInt", cbSecret, "UInt", dwFlags, "Unknow")

; 错误：返回值的类型 NTSTATUS 未知，需自行确定。
; 提示：参数 ppAlgList 的类型 BCRYPT_ALGORITHM_IDENTIFIER 未知，但根据特征猜测应为 Ptr* 。
dwAlgOperations := ""
pAlgCount := ""
ppAlgList := ""
dwFlags := ""
ret := DllCall("BCryptEnumAlgorithms", "UInt", dwAlgOperations, "UInt*", pAlgCount, "Ptr*", ppAlgList, "UInt", dwFlags, "Unknow")

; 错误：返回值的类型 NTSTATUS 未知，需自行确定。
; 提示：参数 phAlgorithm 的类型 BCRYPT_ALG_HANDLE 未知，但根据特征猜测应为 Ptr* 。
phAlgorithm := ""
pszAlgId := ""
pszImplementation := ""
dwFlags := ""
ret := DllCall("BCryptOpenAlgorithmProvider", "Ptr*", phAlgorithm, "WStr", pszAlgId, "WStr", pszImplementation, "UInt", dwFlags, "Unknow")

lpsz := ""
ret := DllCall("CharLower", "Str", lpsz, "Str")

; 提示：参数 lpProcessAttributes 的类型 LPSECURITY_ATTRIBUTES 未知，但根据特征猜测应为 Ptr 。
; 提示：参数 lpThreadAttributes 的类型 LPSECURITY_ATTRIBUTES 未知，但根据特征猜测应为 Ptr 。
; 提示：参数 lpStartupInfo 的类型 LPSTARTUPINFOA 未知，但根据特征猜测应为 Ptr 。
; 提示：参数 lpProcessInformation 的类型 LPPROCESS_INFORMATION 未知，但根据特征猜测应为 Ptr 。
lpApplicationName := ""
lpCommandLine := ""
VarSetCapacity(lpProcessAttributes, 128, 0)
VarSetCapacity(lpThreadAttributes, 128, 0)
bInheritHandles := ""
dwCreationFlags := ""
VarSetCapacity(lpEnvironment, 128, 0)
lpCurrentDirectory := ""
VarSetCapacity(lpStartupInfo, 128, 0)
VarSetCapacity(lpProcessInformation, 128, 0)
ret := DllCall("CreateProcessA", "AStr", lpApplicationName, "AStr", lpCommandLine, "Ptr", &lpProcessAttributes, "Ptr", &lpThreadAttributes, "Int", bInheritHandles, "UInt", dwCreationFlags, "Ptr", &lpEnvironment, "AStr", lpCurrentDirectory, "Ptr", &lpStartupInfo, "Ptr", &lpProcessInformation)

dwDesiredAccess := ""
bInheritHandle := ""
dwProcessId := ""
ret := DllCall("OpenProcess", "UInt", dwDesiredAccess, "Int", bInheritHandle, "UInt", dwProcessId, "Ptr")

ProcessHandle := ""
DesiredAccess := ""
TokenHandle := ""
ret := DllCall("OpenProcessToken", "Ptr", ProcessHandle, "UInt", DesiredAccess, "Ptr*", TokenHandle)

; 提示：参数 lpLuid 的类型 PLUID 未知，但根据特征猜测应为 Ptr 。
lpSystemName := ""
lpName := ""
VarSetCapacity(lpLuid, 128, 0)
ret := DllCall("LookupPrivilegeValueA", "AStr", lpSystemName, "AStr", lpName, "Ptr", &lpLuid)

; 错误：参数 NewState 的类型 PTOKEN_PRIVILEGES 未知，需自行确定。
; 错误：参数 PreviousState 的类型 PTOKEN_PRIVILEGES 未知，需自行确定。
TokenHandle := ""
DisableAllPrivileges := ""
NewState := ""
BufferLength := ""
PreviousState := ""
ReturnLength := ""
ret := DllCall("AdjustTokenPrivileges", "Ptr", TokenHandle, "Int", DisableAllPrivileges, "Unknow", NewState, "UInt", BufferLength, "Unknow", PreviousState, "UInt*", ReturnLength)

lpidProcess := ""
cb := ""
lpcbNeeded := ""
ret := DllCall("EnumProcesses", "UInt*", lpidProcess, "UInt", cb, "UInt*", lpcbNeeded)

hProcess := ""
hModule := ""
lpBaseName := ""
nSize := ""
ret := DllCall("GetModuleBaseNameA", "Ptr", hProcess, "Ptr", hModule, "AStr", lpBaseName, "UInt", nSize, "UInt")

hProcess := ""
lpImageFileName := ""
nSize := ""
ret := DllCall("GetProcessImageFileNameA", "Ptr", hProcess, "AStr", lpImageFileName, "UInt", nSize, "UInt")

; 提示：参数 lpfn 的类型 HOOKPROC 未知，但根据特征猜测应为 Ptr 。
idHook := ""
VarSetCapacity(lpfn, 128, 0)
hmod := ""
dwThreadId := ""
ret := DllCall("SetWindowsHookExA", "Int", idHook, "Ptr", &lpfn, "Ptr", hmod, "UInt", dwThreadId, "Ptr")

hhk := ""
ret := DllCall("UnhookWindowsHookEx", "Ptr", hhk)

lpModuleName := ""
ret := DllCall("GetModuleHandleA", "AStr", lpModuleName, "Ptr")

nCode := ""
wParam := ""
lParam := ""
ret := DllCall("LowLevelMouseProc", "Int", nCode, "UPtr", wParam, "Ptr", lParam, "Ptr")

ret := DllCall("GetCommandLineA", "AStr")

